using System.Text;
using SteamDatabase.ValvePak;

const int EXIT_CODE_SUCCESS = 0;
const int EXIT_CODE_VPK_HAS_NO_CONFIG = 1;
const int EXIT_CODE_SHOW_USAGE = 2;

static void ShowUsage()
{
    string exePath = System.Diagnostics.Process.GetCurrentProcess().MainModule?.FileName ?? "ChatLane.exe";
    string exeFileName = Path.GetFileName(exePath);

    Console.WriteLine($"Usage: {exeFileName} [input] [output]");
    Console.WriteLine("");
    Console.WriteLine("Mode 1: input.yml pak99_dir.vpk");
    Console.WriteLine("Generate a VPK add-on from the given config. Errors if the config is invalid.");
    Console.WriteLine("");
    Console.WriteLine("Mode 2: pak99_dir.vpk output.yml");
    Console.WriteLine("Extract the config from the given VPK add-on. Errors if VPK does not contain a config.");
    Console.WriteLine("");
    Console.WriteLine("See README and example.yml for more info.");
}

if (args.Length != 2)
{
    ShowUsage();
    return EXIT_CODE_SHOW_USAGE;
}

string inputPath = args[0];
string outputPath = args[1];

if (inputPath.ToLowerInvariant().EndsWith("yml"))
{
    // Mode 1 (make vpk)
    var inputContents = File.ReadAllText(inputPath);
    var kvroot = YAMLToKeyValues.Convert(inputContents);

    var data = new DATABlock();
    data.KeyValuesRoot = kvroot;

    using var vdata = new MemoryStream();
    var vdataWriter = new BinaryWriter(vdata);
    data.Write(vdataWriter);

    // vdata_c normally includes a FLCI block, but seems like game does not check for it,
    // and since I have no clue what it represents, I just leave it out...
    var red2 = new RED2Block();
    red2.DataToHash = vdata.ToArray();

    var resource = new WriteResource();
    resource.Blocks = new List<Block> {
        red2, data
    };
    using var vdatac = new MemoryStream();
    resource.Write(vdatac);

    var readme = """
    This VPK was automatically generated by ChatLane:

    https://github.com/redmser/chatlane

    You can load this VPK file into the GUI application to edit the configuration again.
    To install the add-on, follow the instructions in the link above.
    """;

    if (outputPath.ToLowerInvariant().EndsWith("vpk"))
    {
        using var vpk = new Package();
        vpk.AddFile("scripts/ping_wheel_messages.vdata_c", vdatac.ToArray());
        vpk.AddFile("chatlane.yml", Encoding.UTF8.GetBytes(inputContents));
        vpk.AddFile("README", Encoding.UTF8.GetBytes(readme));
        vpk.Write(outputPath);
    }
    return EXIT_CODE_SUCCESS;
}
else if (inputPath.ToLowerInvariant().EndsWith("vpk"))
{
    // Mode 2 (extract yml)
    using var vpk = new Package();
    vpk.Read(inputPath);

    var cfg = vpk.FindEntry("chatlane.yml");
    if (cfg == null)
    {
        Console.WriteLine("ERROR: The specified VPK was not created with ChatLane!");
        return EXIT_CODE_VPK_HAS_NO_CONFIG;
    }

    vpk.ReadEntry(cfg, out var cfgBytes, false);

    if (outputPath.ToLowerInvariant().EndsWith("yml"))
    {
        File.WriteAllBytes(outputPath, cfgBytes);
    }
    return EXIT_CODE_SUCCESS;
}
else
{
    ShowUsage();
    return EXIT_CODE_SHOW_USAGE;
}
